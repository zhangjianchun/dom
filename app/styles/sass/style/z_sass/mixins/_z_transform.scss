@charset "UTF-8";
//2D
@mixin transform-translate($x:$z-transform-translate-x,$y:$z-transform-translate-x){
		/*2d位移*/
	transform: translate(px($x),px($y));
}
//3D
@mixin transform-translate3d($x:$z-transform-translate3d-x,$y:$z-transform-translate3d-x,$z:$z-transform-translate3d-x){
		/*3d位移*/
	transform: translate3d(px($x),px($y),px($z));
}
@mixin transform-rotate($deg:$z-transform-rotate-deg){
	/* 2D 旋转*/
	transform: rotate(add-unit($deg,deg));
}
@mixin transform-rotate3d($x-deg:$z-transform-rotate3d-x-deg,$y-deg:$z-transform-rotate3d-y-deg,$z-deg:$z-transform-rotate3d-z-deg){
	/* 3D 旋转*/
	transform: rotate3d(add-unit($x-deg,deg),add-unit($y-deg,deg),add-unit($z-deg,deg));
}
@mixin transform-scale($x:$z-transform-scale-x,$y:$z-transform-scale-y){
	/* 2D 缩放*/
	transform: scale(remove-unit($x),remove-unit($y));
}
@mixin transform-scale3d($x:$z-transform-scale3d-x,$y:$z-transform-scale3d-y,$z:$z-transform-scale3d-z){
	/* 3D 缩放*/
	transform: scale3d(remove-unit($x),remove-unit($y),remove-unit($z));
}
@mixin transform-skew($x-deg:$z-transform-skew-x-deg,$y-deg:$z-transform-skew-y-deg){
	/* 2D 倾斜 */
	transform: skew(add-unit($x-deg,deg),add-unit($y-deg,deg));
}
@mixin transform-skew3d($x-deg:$z-transform-skew3d-x-deg,$y-deg:$z-transform-skew3d-y-deg,$z-deg:$z-transform-skew3d-z-deg){
	/* 3D 倾斜 */
	transform: skew3d(add-unit($x-deg,deg),add-unit($y-deg,deg),add-unit($z-deg,deg));
}

@mixin transform-matrix($a,$b,$c,$d,$e,$f){
transform:matrix($a,$b,$c,$d,$e,$f);
-ms-transform:matrix($a,$b,$c,$d,$e,$f);		
-moz-transform:matrix($a,$b,$c,$d,$e,$f);	///* Firefox */
-webkit-transform:matrix($a,$b,$c,$d,$e,$f);	///* Safari and Chrome */
-o-transform:matrix($a,$b,$c,$d,$e,$f);		///* Opera */
}

 // 2D 3D


// none	定义不进行转换。
// matrix(n,n,n,n,n,n)	定义 2D 转换，使用六个值的矩阵。
// matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)	定义 3D 转换，使用 16 个值的 4x4 矩阵。
// translate(x,y)	定义 2D 转换。
// translate3d(x,y,z)	定义 3D 转换。
// translateX(x)	定义转换，只是用 X 轴的值。
// translateY(y)	定义转换，只是用 Y 轴的值。
// translateZ(z)	定义 3D 转换，只是用 Z 轴的值。
// scale(x[,y]?)	定义 2D 缩放转换。
// scale3d(x,y,z)	定义 3D 缩放转换。
// scaleX(x)	通过设置 X 轴的值来定义缩放转换。
// scaleY(y)	通过设置 Y 轴的值来定义缩放转换。
// scaleZ(z)	通过设置 Z 轴的值来定义 3D 缩放转换。
// rotate(angle)	定义 2D 旋转，在参数中规定角度。
// rotate3d(x,y,z,angle)	定义 3D 旋转。
// rotateX(angle)	定义沿着 X 轴的 3D 旋转。	测试
// rotateY(angle)	定义沿着 Y 轴的 3D 旋转。
// rotateZ(angle)	定义沿着 Z 轴的 3D 旋转。
// skew(x-angle,y-angle)	定义沿着 X 和 Y 轴的 2D 倾斜转换。
// skewX(angle)	定义沿着 X 轴的 2D 倾斜转换。
// skewY(angle)	定义沿着 Y 轴的 2D 倾斜转换。
// perspective(n)	为 3D 转换元素定义透视视图。
// Transformations
@mixin scale($ratio...) {
  -webkit-transform: scale($ratio);
      -ms-transform: scale($ratio); // IE9 only
       -o-transform: scale($ratio);
          transform: scale($ratio);
}

@mixin scaleX($ratio) {
  -webkit-transform: scaleX($ratio);
      -ms-transform: scaleX($ratio); // IE9 only
       -o-transform: scaleX($ratio);
          transform: scaleX($ratio);
}
@mixin scaleY($ratio) {
  -webkit-transform: scaleY($ratio);
      -ms-transform: scaleY($ratio); // IE9 only
       -o-transform: scaleY($ratio);
          transform: scaleY($ratio);
}
@mixin skew($x, $y) {
  -webkit-transform: skewX($x) skewY($y);
      -ms-transform: skewX($x) skewY($y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
       -o-transform: skewX($x) skewY($y);
          transform: skewX($x) skewY($y);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
      -ms-transform: translate($x, $y); // IE9 only
       -o-transform: translate($x, $y);
          transform: translate($x, $y);
}
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
      -ms-transform: rotate($degrees); // IE9 only
       -o-transform: rotate($degrees);
          transform: rotate($degrees);
}
@mixin rotateX($degrees) {
  -webkit-transform: rotateX($degrees);
      -ms-transform: rotateX($degrees); // IE9 only
       -o-transform: rotateX($degrees);
          transform: rotateX($degrees);
}
@mixin rotateY($degrees) {
  -webkit-transform: rotateY($degrees);
      -ms-transform: rotateY($degrees); // IE9 only
       -o-transform: rotateY($degrees);
          transform: rotateY($degrees);
}
@mixin perspective($perspective) {
  -webkit-perspective: $perspective;
     -moz-perspective: $perspective;
          perspective: $perspective;
}
@mixin perspective-origin($perspective) {
  -webkit-perspective-origin: $perspective;
     -moz-perspective-origin: $perspective;
          perspective-origin: $perspective;
}
@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
     -moz-transform-origin: $origin;
      -ms-transform-origin: $origin; // IE9 only
          transform-origin: $origin;
}
