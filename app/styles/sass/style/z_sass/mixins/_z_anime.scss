@charset "UTF-8";
@mixin anime( $name: $z-name, $duration:$z-duration, $keyframes:$z-keyframes, $waitTime:$z-waitTime, $timingFunction:$z-timingFunction, $iterationCount:$z-iterationCount, $animation-direction:$z-animation-direction, $animation-fill-mode:$z-animation-fill-mode) {
    $options: ( animationName: $name, duration: $duration, keyframes: $keyframes, waitTime: $waitTime, timingFunction: $timingFunction, iterationCount: $iterationCount, animation-direction: $animation-direction, animation-fill-mode: $animation-fill-mode);
    $name: map-get($options, animationName);
    $kf: map-get($options, keyframes);
    $kfLength: length($kf);
    $duration: map-get($options, duration);
    $waitTime: map-get($options, waitTime);
    $timingFunction: map-get($options, timingFunction);
    $iterationCount: map-get($options, iterationCount);
    $animation-direction: map-get($options, animation-direction);
    $animation-fill-mode: map-get($options, animation-fill-mode);
    $start: map-has-key(map-get($options, keyframes), 0);
    $end: map-has-key(map-get($options, keyframes), 100);
    $counter: 1; // index of 'each'
    @keyframes #{$name} {
        @each $frame,
        $prop in $kf {
            @if $counter==1 and $start==false and $kfLength > 1 {
                0% {
                    @each $k,
                    $v in $prop {
                        #{$k}: #{$v}
                    }
                }
            }
            #{pe($frame)} {
                @each $k,
                $v in $prop {
                    #{$k}: #{$v}
                }
            }
            @if $counter==$kfLength and $end==false and $kfLength > 1 {
                100% {
                    @each $k,
                    $v in $prop {
                        #{$k}: #{$v}
                    }
                }
            }
            $counter: $counter+1;
        }
    }
    /* css3 动画 */
    animation: #{$name} #{add-unit($duration,1s)} #{$timingFunction} #{add-unit($waitTime,1s)} #{$iterationCount} #{$animation-direction} #{$animation-fill-mode};
}

///* css3 动画 */
//SCSS
// .anime {
//     @include anime(
//        
//             $name: zoom,//规定动画的名称,默认谁机数;
//             $keyframes: (
//                 0: (
//                     transform: scale(1),
//                     background-color: blue
//                 ), 
//                 20: (
//                     transform: scale(3),
//                     background-color: #369
//                 ),
//                 80: (
//                     transform: scale(3),
//                     background-color: red
//                 )
//             ),
//             $duration: 2,
//             //n动画完成一个周期所花费的秒或毫秒。默认是 1
//             $waitTime: 1,
//             //n规定动画何时开始。默认是 0
//             $timingFunction: linear,
//             //规定动画的速度曲线。
//             //默认是 "ease"动画以低速开始，然后加快，在结束前变慢;
//             //linear => 云速;
//             //ease-in => 动画以低速开始;
//             //ease-out => 动画以低速结束;
//             //ease-in-out => 动画以低速开始和结束;
//             //cubic-bezier(n,n,n,n) => 在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。1快，0慢
//             $iterationCount: 30,
//             //规定动画被播放的次数。
//             //n => 默认是 1;
//             //infinite => 规定动画应该无限次播放;
//             $animation-direction:alternate,
//             //规定动画是否在下一周期逆向地播放;
//             //normal => ;默认是 动画应该正常播放;
//             //alternate => 动画应该轮流反向播放;
//             $animation-fill-mode:both
//             //规定对象动画(前后)时间之外的状态。
//             //none => 不改变默认行为。
//             //forward => s当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。
//             //backwards => 在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。
//             //both => 向前和向后填充模式都被应用。
//       
//     );
// }
